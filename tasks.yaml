includes:
  - cleanup: ./tasks/cleanup.yaml
  - dependencies: ./tasks/dependencies.yaml
  - test: ./tasks/test.yaml
  - create: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/create.yaml
  - lint: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/lint.yaml
  - pull: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/pull.yaml
  - deploy: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/deploy.yaml
  - setup: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/setup.yaml
  - badge: https://raw.githubusercontent.com/defenseunicorns/uds-common/v0.13.1/tasks/badge.yaml

tasks:
  - name: default
    description: Create K3D Cluster with UDS-Core + repo UDS Package
    actions:
      - task: create-test-bundle
      - task: setup:k3d-test-cluster
      - task: deploy:test-bundle

  - name: create-package
    description: Create the UDS Package defined in this repo, No dependencies included
    actions:
      - task: create:package
        with:
          options: "--skip-sbom"

  - name: create-test-bundle
    description: Create a local UDS bundle defined in the bundle subdirectory with dependencies
    actions:
      - task: create-package
      - task: dependencies:create
      - task: create:test-bundle

  - name: create-latest-release-bundle
    description: Create UDS bundle with dependencies based on the latest release
    actions:
      - task: pull:latest-package-release
        with:
          spoof_release: "true"
      - task: dependencies:create
      - task: create:test-bundle

  - name: dev
    description: deploy against running cluster
    actions:
      - task: create-test-bundle
      - task: deploy:test-bundle

  - name: cleanup-cluster
    description: Destroy k3d cluster
    actions:
      - task: cleanup:cluster

  # CI will execute the following (via uds-common/.github/actions/test) so they need to be here with these names

  - name: test-package
    description: Test the UDS package from the current branch
    actions:
      - task: create-test-bundle
      - task: setup:k3d-test-cluster
      - task: deploy:test-bundle
      - task: create-doug-user
      - task: test:all

  - name: test-upgrade
    description: Test an upgrade from the latest released package to the current branch
    actions:
      - task: create-latest-release-bundle
      - task: setup:k3d-test-cluster
      - task: deploy:test-bundle
      - task: create-test-bundle
      - task: deploy:test-bundle
      - task: create-doug-user
      - task: test:all

  - name: create-doug-user
    actions:
      - description: Create a user named 'doug' in the uds realm of keycloak (using the default admin account)
        cmd: |
          KEYCLOAK_GROUP="/UDS Core/Admin"
          KEYCLOAK_ADMIN_PASSWORD=$(./uds zarf tools kubectl get secret -n keycloak keycloak-admin-password -o jsonpath={.data.password} | base64 -d)
          KEYCLOAK_ADMIN_TOKEN=$(curl -s --location "https://keycloak.admin.uds.dev/realms/master/protocol/openid-connect/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "username=admin" \
            --data-urlencode "password=${KEYCLOAK_ADMIN_PASSWORD}" \
            --data-urlencode "client_id=admin-cli" \
            --data-urlencode "grant_type=password" | ./uds zarf tools yq .access_token)

          # Create the doug user in the UDS Realm
          curl --location "https://keycloak.admin.uds.dev/admin/realms/uds/users" \
          --header "Content-Type: application/json" \
          --header "Authorization: Bearer ${KEYCLOAK_ADMIN_TOKEN}" \
          --data-raw '{
              "username": "doug",
              "firstName": "Doug",
              "lastName": "Unicorn",
              "email": "doug@uds.dev",
              "attributes": {
                "mattermostid": "1"
              },
              "emailVerified": true,
              "enabled": true,
              "requiredActions": [],
              "credentials": [
                {
                  "type": "password",
                  "value": "unicorn123!@#UN",
                  "temporary": false
                }
              ]'"${KEYCLOAK_GROUP:+,
              \"groups\": [
                \"${KEYCLOAK_GROUP}\"
              ]}"'
          }'

          # Disable 2FA
          CONDITIONAL_OTP_ID=$(curl --location "https://keycloak.admin.uds.dev/admin/realms/uds/authentication/flows/Authentication/executions" \
            --header "Authorization: Bearer ${KEYCLOAK_ADMIN_TOKEN}" | ./uds zarf tools yq '.[] | select(.displayName == "Conditional OTP") | .id')

          curl --location --request PUT "https://keycloak.admin.uds.dev/admin/realms/uds/authentication/flows/Authentication/executions" \
          --header "Content-Type: application/json" \
          --header "Authorization: Bearer ${KEYCLOAK_ADMIN_TOKEN}" \
          --data "{
                  \"id\": \"${CONDITIONAL_OTP_ID}\",
                  \"requirement\": \"DISABLED\"
              }"
